/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2022 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.device;

import "google/protobuf/empty.proto";

import "t2iapi/basic_responses.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/device/device_requests.proto";
import "t2iapi/device/device_responses.proto";

option java_package = "com.draeger.medical.t2iapi.device";
option java_outer_classname = "DeviceApiService";

/*
Service to handle device manipulations.
 */
service DeviceService {

    /*
    Switch the device into a specific operating mode.
    This manipulation shall result in a Mds having a specific MdsOperatingMode.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetDeviceOperatingMode (t2iapi.device.SetDeviceOperatingModeRequest)
        returns (BasicResponse);

    /*
    Announce the presence of the device in the network via a WS-Discovery Hello message.
     */
    rpc SendHello (google.protobuf.Empty) returns (BasicResponse);

    /*
    Adjust the clock of the device as if it were set manually by a user.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetClockDevice (google.protobuf.Empty) returns (BasicResponse);

    /*
    Set the device's (displayed) language to the given language.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetLanguage (t2iapi.device.SetLanguageRequest) returns (BasicResponse);

    /*
    Get all descriptor handles which can be removed and reinserted into the MDIB of the device
    and whose descriptors are of the given class.
    Includes handles which have been removed already and can be reinserted.
    Handles must stay the same once reinserted into the MDIB.

    Calling GetRemovableDescriptorsOfClass with descriptor_class = DESCRIPTOR_CLASS_ABSTRACT
    returns the unfiltered handles while other values for descriptor_class
    return only handles whose descriptors are of the given class.

    The unfiltered handles shall be representative of the devices capabilities
    to remove descriptors (at least one of every possible kind).
     */
    rpc GetRemovableDescriptorsOfClass (GetRemovableDescriptorsOfClassRequest)
        returns (t2iapi.device.GetRemovableDescriptorsResponse);

    /*
    Remove a descriptor from the device MDIB.
     */
    rpc RemoveDescriptor(BasicHandleRequest) returns (BasicResponse);

    /*
    Insert a descriptor into the device MDIB.
     */
    rpc InsertDescriptor(BasicHandleRequest) returns (BasicResponse);

    /*
    Insert an mds descriptor into the device MDIB.
    */
    rpc InsertMdsDescriptor (google.protobuf.Empty) returns (t2iapi.device.InsertMdsDescriptorResponse);

    /*
    Remove an mds descriptor from the device MDIB.
     */
    rpc RemoveMdsDescriptor (BasicHandleRequest) returns (BasicResponse);

    /*
    Trigger a descriptor update for the provided handle.
    This manipulation of the device shall result in a msg:DescriptionModificationReport message with a report part with
    modification type upt.
     */
    rpc TriggerDescriptorUpdate (BasicHandleRequest) returns (BasicResponse);

     /*
    Trigger a report message of the provided type.
    This manipulation of the device shall result in an msg:AbstractReport message of the provided type.
     */
    rpc TriggerReport (TriggerReportRequest) returns (BasicResponse);

     /*
    Use or not use the device's battery as the electrical power source.
    The manipulated state shall be persistent until a next manipulation call or until power failure. If the device is
    not able to maintain the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetBatteryUsage (t2iapi.device.SetBatteryUsageRequest) returns (BasicResponse);
}
