/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2022 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.device;

import "google/protobuf/empty.proto";

import "t2iapi/basic_responses.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/device/device_requests.proto";
import "t2iapi/device/device_responses.proto";

option java_package = "com.draeger.medical.t2iapi.device";
option java_outer_classname = "DeviceApiService";

/*
Service to handle device manipulations.
 */
service DeviceService {

    /*
    Switch the device into a specific operating mode.
    This manipulation shall result in a Mds having a specific MdsOperatingMode.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetDeviceOperatingMode (t2iapi.device.SetDeviceOperatingModeRequest)
        returns (BasicResponse);

    /*
    Announce the presence of the device in the network via a WS-Discovery Hello message.
     */
    rpc SendHello (google.protobuf.Empty) returns (BasicResponse);

    /*
    Adjust the clock of the device as if it were set manually by a user.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetClockDevice (google.protobuf.Empty) returns (BasicResponse);

    /*
    Set the device's (displayed) language to the given language.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetLanguage (t2iapi.device.SetLanguageRequest) returns (BasicResponse);

    /*
    Set the language of the component with a UI represented by the MDS to the given language.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
    */
    rpc SetMdsUiLanguage (t2iapi.device.SetMdsUiLanguageRequest) returns (BasicResponse);

    /*
    Get all supported languages of the component with a UI represented by the MDS with the provided handle.
    */
    rpc GetMdsUiSupportedLanguages (t2iapi.BasicHandleRequest) returns (GetMdsUiSupportedLanguagesResponse);

    /*
    Get all descriptor handles which can be removed and reinserted into the MDIB of the device
    and whose descriptors are of the given class.
    Includes handles which have been removed already and can be reinserted.
    Handles must stay the same once reinserted into the MDIB.

    Calling GetRemovableDescriptorsOfClass with descriptor_class = DESCRIPTOR_CLASS_ABSTRACT
    returns the unfiltered handles while other values for descriptor_class
    return only handles whose descriptors are of the given class.

    The unfiltered handles shall be representative of the devices capabilities
    to remove descriptors (at least one of every possible kind).
     */
    rpc GetRemovableDescriptorsOfClass (GetRemovableDescriptorsOfClassRequest)
        returns (t2iapi.device.GetRemovableDescriptorsResponse);

    /*
    Remove a descriptor from the device MDIB.
     */
    rpc RemoveDescriptor(BasicHandleRequest) returns (BasicResponse);

    /*
    Insert a descriptor into the device MDIB.
     */
    rpc InsertDescriptor(BasicHandleRequest) returns (BasicResponse);

    /*
    Insert an mds descriptor into the device MDIB.
    */
    rpc InsertMdsDescriptor (google.protobuf.Empty) returns (t2iapi.device.InsertMdsDescriptorResponse);

    /*
    Remove an mds descriptor from the device MDIB.
     */
    rpc RemoveMdsDescriptor (BasicHandleRequest) returns (BasicResponse);

    /*
    Trigger a DescriptionManipulationReport that fulfills the following:

    For each given handle there exists an "Upt"-ReportPart that contains an updated descriptor, whose @DescriptorHandle
    is equal to the given handle, and that is contained in the DescriptionModificationReport.

    ---

    Note that when no handle is given, every DescriptionModificationReport fulfills the request.
     */
    rpc TriggerDescriptorUpdate (TriggerDescriptorUpdateRequest) returns (BasicResponse);

    /*
    Trigger a descriptor update.
    The descriptor to update has to be chosen by the device. It is expected that this manipulation succeeds
    as long as there are descriptors than can be updated.
    This manipulation shall result in a msg:DescriptionModificationReport message containing a report part with
    msg:ReportPart/@ModificationType = "Upt".
     */
    rpc TriggerAnyDescriptorUpdate (google.protobuf.Empty) returns (BasicResponse);

     /*
    Trigger a report message of the provided type.
    This manipulation of the device shall result in an msg:AbstractReport message of the provided type.
     */
    rpc TriggerReport (TriggerReportRequest) returns (BasicResponse);

     /*
    Use or not use the device's battery as the electrical power source.
    The manipulated state shall be persistent until a next manipulation call or until power failure. If the device is
    not able to maintain the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetBatteryUsage (t2iapi.device.SetBatteryUsageRequest) returns (BasicResponse);

	   /*
    Provide information about the pm:CalibrationInfo for the given pm:AbstractDeviceComponentDescriptor.
    If the device is not able to provide the information, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc ProvideInformationAboutLastCalibration (t2iapi.device.ProvideInformationAboutLastCalibrationRequest)
        returns (BasicResponse);

     /*
    Provide information about the pm:NextCalibration for the given pm:AbstractDeviceComponentDescriptor.
    If the device is not able to provide the information, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc ProvideInformationAboutNextCalibration (t2iapi.device.ProvideInformationAboutNextCalibrationRequest)
        returns (BasicResponse);

    /*
    Get the available device metadata of the pm:MdsDescriptor for the given handle. For each item of the metadata
    that is not available for this MDS leave the corresponding element empty. In this context, "available" does not
    mean a copy of the data from the pm:MdsDescriptor/pm:MetaData. It means a provision of the data which, in the
    user's opinion, must be present for this device.
     */
    rpc GetAvailableDeviceMetaData(BasicHandleRequest) returns (AvailableDeviceMetaDataResponse);

    /*
    Get the software version of the requested pm:AbstractDeviceComponentDescriptor handle if it is representing
    a component with a software version.
     */
    rpc GetComponentSwVersion (BasicHandleRequest)
        returns (t2iapi.device.GetComponentSwVersionResponse);

    /*
    Get the hardware version of the requested pm:AbstractDeviceComponentDescriptor handle if it is representing
    a component with a hardware version.
     */
    rpc GetComponentHwVersion (BasicHandleRequest)
        returns (t2iapi.device.GetComponentHwVersionResponse);

    /*
    Request for the given pm:AbstractDeviceComponentDescriptor handle, if it can be required by a particular standard
    or RISK MANAGEMENT process to indicate the time of the next calibration to the USER.
     */
    rpc RequestIndicationOfNextCalibrationTimeRequired (BasicHandleRequest)
        returns (BasicResponse);

    /*
    Indicate the time of the next calibration to the USER for the given pm:AbstractDeviceComponentDescriptor handle.
     */
    rpc IndicateTimeOfNextCalibrationToUser (BasicHandleRequest)
        returns (BasicResponse);

    /*
    Make available the CONTAINMENT TREE ENTRY(as defined in IEEE Std 11073-10207-2017) that was previously
    represented by the provided handle in the MDIB with the provided @SequenceId. If the CONTAINMENT TREE ENTRY is
    absent in the current MDIB, it shall be inserted and its (new) handle shall be returned. If the
    CONTAINMENT TREE ENTRY is already present in the current MDIB, only its handle shall be returned, no further
    action is required.

    Hint: Devices which use static handles for descriptors do not have to lookup the previous handles since
    they stay the same.

    Example 1: returning the same handle for the Metric
    - device presented an MDIB with the Metric handle "metric_1" in @SequenceID "123"
    - device changes @SequenceID to "789" and presents a new MDIB
    - metric with the handle "metric_1" is still present in the current MDIB
    - InsertContainmentTreeEntryForSequenceId with handle="metric_1" and sequence_id="123" is executed
    - "metric_1" is returned since the descriptor with this handle it is still available in the current MDIB
    - no further action from the device is required

    Example 2: returning a new handle for the MDS:
    - device presented an MDIB with MDS handle "mds0" in @SequenceID "123"
    - device changes @SequenceID to "789" and presents a new MDIB
    - MDS with the handle "mds0" is still present in the current MDIB but it's handle changed to "mds10"
    - InsertContainmentTreeEntryForSequenceId with handle="mds0" and sequence_id="123" is executed
    - "mds10" is returned since the descriptor handle for that MDS has changed
    - no further action from the device is required

    Example 3: inserting the Channel into the current MDIB and returning the (new) handle:
    - device presented the Channel with handle "channel123" in @SequenceID "123"
    - device changes @SequenceID to "789" and presents a new MDIB
    - channel with handle "channel123" is no longer present in the current MDIB
    - InsertContainmentTreeEntryForSequenceId with handle="channel123" and sequence_id="123" is executed
    - channel is inserted into the device's current MDIB
    - the (new) handle of the inserted channel is returned
    */
    rpc InsertContainmentTreeEntryForSequenceId (InsertContainmentTreeEntryForSequenceIdRequest)
        returns (InsertContainmentTreeEntryForSequenceIdResponse);
}
