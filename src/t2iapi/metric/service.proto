/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2022, 2023, 2024 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.metric;

import "t2iapi/basic_responses.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/metric/metric_requests.proto";
import "t2iapi/metric/metric_responses.proto";

option java_package = "com.draeger.medical.t2iapi.metric";
option java_outer_classname = "MetricApiService";

/*
Service to handle metric manipulations.
 */
service MetricService {

  /*
  Set the MetricQuality/@Validity of the metric with the given handle to the given validity value.
   */
  rpc SetMetricQualityValidity (t2iapi.metric.SetMetricQualityValidityRequest)
      returns (BasicResponse);

  /*
  For the metric with the provided handle do the following:
   - set the @ActivationState to the provided value
   - set the pm:MetricValue/@Value resp. @Samples and confirm the value via the device ui
  Ensure that the @ActivationState remains set for as long as the confirmable value is set.
   */
  rpc SetActivationStateAndUserConfirmableValue (t2iapi.metric.SetActivationStateAndUserConfirmableValueRequest)
      returns (BasicResponse);

  /*
  Set an incorrect value for the metric with the provided handle. If an incorrect value for the metric is already
  present, a new incorrect value shall be set. The "incorrect value" refers to BICEPS
  pm:AbstractMetricValue/MetricQuality/@Validity. A measured value that is incorrect from the perspective of
  the measuring device.
   */
  rpc SetIncorrectValue (BasicHandleRequest)
      returns (BasicResponse);

  /*
  Start a new calibration for the metric with the provided handle and return the calibration values.
   */
  rpc CalibrateMetric (BasicHandleRequest)
      returns (t2iapi.metric.CalibrateMetricResponse);

  /*
  Provide metric values with a specific MetricQuality/@Mode for the metric with the given handle.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc SetMetricValuesWithQualityMode (t2iapi.metric.SetMetricValuesWithQualityModeRequest)
      returns (BasicResponse);

  /*
  Set new metric value(s) (resulting in new pm:MetricValue/@Value resp. pm:MetricValue/@Samples) within a given range.
  The range is defined by lower and upper limit values which shall not be violated.
  If no limit values are requested (empty strings), a random but valid metric @Value or @Samples shall be set.
  If a limit is requested, it shall not be violated by the new metric @Value or @Samples.
  Even if a metric @Value or @Samples is already present, a new metric @Value or @Samples shall be provided.
   */
  rpc SetMetricValuesInRange (t2iapi.metric.SetMetricValuesInRangeRequest)
      returns (BasicResponse);

  /*
  Set the provided measurement, calculation or setting status for the metric of the provided handle. This is not the
  AbstractMetricState/@ActivationState, but the internal state of the device.
  The resulting AbstractMetricState/@ActivationState shall be persistent until the next manipulation call.
  If the device is not able to maintain the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc SetMetricStatus (t2iapi.metric.SetMetricStatusRequest) returns (BasicResponse);

  /*
  Requests if the given metric handle is a computer-controlled metric.

  A computer-controlled metric is a metric with @MetricCategory âˆˆ { Set, Preset } which is automatically
  adapted by the device under test, e.g. for an FiO2 closed-loop within a device.
   */
  rpc IsComputerControlled (BasicHandleRequest)
      returns (t2iapi.metric.IsComputerControlledResponse);

  /*
  Provide pm:MetricValue/@Value or pm:MetricValue/@Samples for the metric with the requested handle.

  The goal of this rpc is to have values present continuously, the values themselves may change over time.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc ProvideMetricValueOrSamples (BasicHandleRequest)
      returns (BasicResponse);

  /*
  For the metric with the provided handle perform the following transition:
   - provide pm:MetricValue/@Value resp. @Samples and then
   - express for the metric that no value is available.
   */
  rpc TransitionProvideValueToExpressNoValueAvailable (BasicHandleRequest)
      returns (BasicResponse);

  /*
  Convey demo values for the metric with the given handle.
  This means that the metric value is arbitrary and for demonstration purposes only.
   */
  rpc ConveyMetricDemoValues (BasicHandleRequest)
      returns (BasicResponse);

  /*
  The metric with the given handle shall be set to an active MODE OF OPERATION if it is representing a
  MODE OF OPERATION. If the metric does not represent a MODE OF OPERATION, it shall return RESULT_NOT_SUPPORTED.

  Hint: MODE OF OPERATION is defined in the standard 11073-10701-2022 and more details in chapter 6.2.1.
   */
  rpc SetActiveModeOfOperation (BasicHandleRequest)
      returns (BasicResponse);

  /*
  Requests if the metric with the given handle is determined episodically or periodically.
   */
  rpc GetMetricDeterminationMode (BasicHandleRequest)
      returns (t2iapi.metric.GetMetricDeterminationMode);

  /*
  Request for the metric with the given handle to display it with a different pm:Unit than given in the respective
  descriptor.
   */
  rpc DisplayMetricWithDifferentUnit (BasicHandleRequest)
      returns (BasicResponse);
}
