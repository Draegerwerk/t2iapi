/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2022 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.metric;

import "t2iapi/metric/types.proto";

option java_package = "com.draeger.medical.t2iapi.metric";
option java_outer_classname = "MetricRequests";

/*
Request to set the metric value for the provided handle over the provided upper bound.
 */
message SetOverflowRequest {
    string handle = 1;  // handle reference
    string upper_bound = 2;  // upper bound value for overflow
}

/*
Request to set the metric value of the provided handle under the provided lower bound.
 */
message SetUnderflowRequest {
    string handle = 1;  // handle reference
    string lower_bound = 2;  // lower bound value for underflow
}

/*
Request to set the MetricQuality/@Validity of the metric with the given handle to the given validity value.
 */
message SetMetricQualityValidityRequest {
    string handle = 1;  // handle of the metric state for which the MetricQuality/@Validity shall be set
    MeasurementValidity validity = 2;;  // value to set as the MetricQuality/@Validity value
}

/*
Request to provide metric values with a specific MetricQuality/@Mode for the metric with the given handle.
 */
message SetMetricValuesWithQualityModeRequest {
    string handle = 1;  // handle of the metric state for which values shall be provided
        // with the specified MetricQuality/@Mode
    GenerationMode mode = 2;  // value to set as the MetricQuality/@Mode value
}

/*
Request to set metric values within a given range.
 */
message SetMetricValuesInRangeRequest {
    string handle = 1;  // handle of the metric state for which values shall be set
    // Lower and upper limit values which should not be violated by metric values.
    // If both limit values are not defined (empty string) a valid metric value shall be set.
    string lower = 2;
    string upper = 3;
}

/*
Request to change the status of an operation mode.
 */
message ChangeOperationModeStatusRequest {
    string handle = 1;  // handle of the enum metric, which represents the operation mode
    OperationModeStatus operation_mode_status = 2;  // defines if the operation mode status shall be applied
}

/*
Request a change of the status of a metric.
 */
message SetMetricStatusRequest {
    string handle = 1; // handle of the metric for which the status shall be changed
    MetricStatus status = 2; // the measurement, calculation or setting status the metric should be set to, to trigger
    // a certain AbstractMetricState/@ActivationState
}