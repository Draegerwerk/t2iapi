/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2023, 2024 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.combined;

import "t2iapi/combined/combined_requests.proto";
import "t2iapi/context/context_responses.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/basic_responses.proto";

option java_package = "com.draeger.medical.t2iapi.combined";
option java_outer_classname = "CombinedApiService";

/*
Service to handle combined manipulations which result from at least two different manipulations.
 */
service CombinedService {
  /*
  Create a new or adapt an existing context state with the requested @ContextAssociation and
  set the requested @OperatingMode for the referenced operation.
  The context state @Handle which was created or adapted shall be returned.
  The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
  If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
  */
  rpc CreateContextStateWithAssociationAndSetOperatingMode (
  t2iapi.combined.CreateContextStateWithAssociationAndSetOperatingModeRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Request to set the @ActivationState of the component or metric with the given handle to the requested
  ComponentActivation value and to set the @OperatingMode of the operation with the given handle to the requested
  OperatingMode value.
  The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
  If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
  */
  rpc SetComponentActivationAndSetOperatingMode (
  t2iapi.combined.SetComponentActivationAndSetOperatingModeRequest)
      returns (BasicResponse);

  /*
  Request to set the @ActivationState of the alert with the given handle to the requested AlertActivation value and
  to set the @OperatingMode of the operation with the given handle to the requested OperatingMode value.
  The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
  If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
  */
  rpc SetAlertActivationAndSetOperatingMode (
  t2iapi.combined.SetAlertActivationAndSetOperatingModeRequest)
      returns (BasicResponse);

  /*
  Request to set the non-exclusive mode of operation represented by an enum metric with the given handle to the
  requested value and set the @OperatingMode of the operation with the given handle to the requested OperatingMode
  value.
  The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
  If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
  */
  rpc SetModeOfOperationAndSetOperatingMode (
  t2iapi.combined.SetModeOfOperationAndSetOperatingModeRequest)
      returns (BasicResponse);

  /*
  Request to set the @ActivationState of the pm:SystemContextState with the specified HANDLE to the requested value and to
  create or adapt a pm:AbstractContextState with the requested @ContextAssociation for the pm:AbstractContextDescriptor with the given
  HANDLE.
  The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
  If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
  */
  rpc SetSystemContextActivationStateAndContextAssociation (
  t2iapi.combined.SetSystemContextActivationStateAndContextAssociationRequest)
        returns (BasicResponse);

  /*
  Request to set the pm:AbstractDeviceComponentState/@ActivationState corresponding to the specified handle to
  a value in { "On", "StndBy" } and
  physically disconnect the removable subsystem being represented by the
  corresponding pm:AbstractDeviceComponentDescriptor all while persisting the aforementioned ActivationState except when
  it is necessary to change it due to the physical disconnection by means other than this manipulation.

  The ActivationState as requested shall be persisted in all cases except (indirectly)
  as a result of the physical disconnection.
  Reasons other than the physical disconnection constitute a RESULT_NOT_SUPPORTED or RESULT_FAIL.
  In case the ActivationState is not going to be persisted it shall not be a direct result of this manipulation, i.e.
  this manipulation shall not directly change the ActivationState in a way not described here.

  In case the pm:AbstractDeviceComponentDescriptor with the specified handle does not represent a removable subsystem
  it shall return RESULT_NOT_SUPPORTED.
  */
  rpc PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy (BasicHandleRequest)
        returns (BasicResponse);

  /*
  Request to provide a pm:AbstractDeviceComponentState/pm:PhysicalConnector element for the
  pm:AbstractDeviceComponentState corresponding to the specified handle and then to
  physically disconnect the removable subsystem being represented by the
  corresponding pm:AbstractDeviceComponentDescriptor all while persisting the aforementioned pm:PhysicalConnector
  except when it is necessary to change it due to the physical disconnection by means other than this manipulation.

  The pm:PhysicalConnector as requested shall be persisted in all cases except (indirectly)
  as a result of the physical disconnection.
  Reasons other than the physical disconnection constitute a RESULT_NOT_SUPPORTED or RESULT_FAIL.
  In case the pm:PhysicalConnector is not going to be persisted it shall not be a direct result of this manipulation,
  i.e. this manipulation shall not directly change the pm:PhysicalConnector in a way not described here.

  In case the pm:AbstractDeviceComponentDescriptor with the specified handle does not represent a removable subsystem
  it shall return RESULT_NOT_SUPPORTED.
  */
  rpc PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided (BasicHandleRequest)
        returns (BasicResponse);
}
