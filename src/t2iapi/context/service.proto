/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2025 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.context;

import "google/protobuf/empty.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/basic_responses.proto";
import "t2iapi/context/context_requests.proto";
import "t2iapi/context/context_responses.proto";

option java_package = "com.draeger.medical.t2iapi.context";
option java_outer_classname = "ContextApiService";

/*
Service to handle context manipulations.
 */
service ContextService {

  /*
  Use the given LocationDetail in a currently associated LocationContextState or associate a new LocationContextState
  with the LocationDetail.
  The goal of this rpc is to have an associated LocationContextState, that contains the given LocationDetail.
  This can for example be achieved by changing the location of the device in its settings UI.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc SetLocationDetail (t2iapi.context.SetLocationDetailRequest)
      returns (BasicResponse);

  /*
  Set the ContextAssociation of the target ContextState to the given value.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc SetContextStateAssociation (t2iapi.context.SetContextStateAssociationRequest)
      returns (BasicResponse);

  /*
  Create or adapt a ContextState instance with the given ContextAssociation value for the given descriptor handle.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssociation (t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create or adapt a pm:AbstractContextState instance with the given @ContextAssociation value for the given descriptor handle
  and provide at least the number of pm:Validator elements for this ContextState.
  If the number of pm:Validator elements is zero, zero pm:Validator elements shall be provided.
   */
  rpc CreateContextStateWithAssociationAndValidators(
  t2iapi.context.CreateContextStateWithAssociationAndValidatorsRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create or adapt a ContextState instance with the given ContextAssociation value for the given descriptor handle
  and provide at least one Identification and Validator for this ContextState.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssocIdentificationAndValidator(
  t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (BasicResponse);

  /*
  For the Context with the provided descriptor handle perform the following transition:
  - associate a pm:AbstractContextState instance with at least one unique pm:Identification element
    for the Context with the given descriptor handle
  - remove at least one pm:Identification element for the previously associated pm:AbstractContextState.
 */
  rpc TransitionFromCreateStateWithIdentificationToRemoveIdentification (BasicHandleRequest)
      returns (CreateContextStateWithAssociationResponse);

  /*
  For the Context with the provided descriptor handle perform the following transition:
  - associate a pm:AbstractContextState instance with at least one unique pm:Identification element
    for the Context with the given descriptor handle
  - change at least one already present pm:Identification element for the previously associated pm:AbstractContextState.
 */
  rpc TransitionFromCreateStateWithIdentificationToChangeIdentification (BasicHandleRequest)
      returns (CreateContextStateWithAssociationResponse);

  /*
  Create or adapt a ContextState instance with the given ContextAssociation value for the given descriptor handle,
  confirm by requested validator type.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssocAndSpecificValidator(
  t2iapi.context.CreateContextStateWithAssocAndSpecificValidatorRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create or adapt neonatal patient with a given type of association and
  including the mothers identification.
   */
  rpc CreateNeonatalPatientWithAssociationAndMothersIdentification(
  t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create or adapt a PatientContextState with CoreData/PatientType having the requested patient type.
  The PatientContextState/@ContextAssociation shall be "Associated".
   */
  rpc AssociatePatient (t2iapi.context.AssociatePatientRequest)
      returns (BasicResponse);

  /*
  Indicate membership in an SDC PARTICIPANT ENSEMBLE using an ensemble context, indicated by its descriptor handle.
   */
  rpc EnsembleContextIndicateMembership (BasicHandleRequest)
      returns (BasicResponse);

  /*
  Indicate membership in an SDC PARTICIPANT ENSEMBLE using ensemble context state(s) that have the provided descriptor
  handle and return a list of pm:Identification elements which identify the ensemble context state(s).
  If already one or more pm:EnsembleContextState(s) indicate the membership, it is not needed to create a new
  pm:EnsembleContextState(s). In this case it is sufficient to only return the BasicResponse and the pm:Identification
  elements.
  The state shall be persistent until a next manipulation call. If the device is not able to maintain the static state,
  it shall return RESULT_NOT_SUPPORTED.
   */
  rpc EnsembleContextIndicateMembershipWithIdentification (BasicHandleRequest)
      returns (EnsembleContextIndicateMembershipWithIdentificationResponse);

  /*
  Get all ensemble-ids for a provided pm:EnsembleContextDescriptor and return them.

  The ensemble-id is an identifier specified by the USER that uniquely refers to an SDC PARTICIPANT ENSEMBLE. The list
  shall contain all ensemble-ids needed to cover each SDC PARTICIPANT ENSEMBLE membership can be indicated in by a
  pm:EnsembleContextState with @ContextAssociation = 'Assoc' of the provided pm:EnsembleContextDescriptor.
  The ensemble-ids are valid until the next call of this manipulation.
   */
  rpc GetEnsembleIds (BasicHandleRequest)
      returns (GetEnsembleIdsResponse);

  /*
  Indicate membership in an SDC PARTICIPANT ENSEMBLE for a provided pm:EnsembleContextDescriptor and a provided
  ensemble-id by creating or adapting all needed pm:EnsembleContextStates such that their @ContextAssociation is
  "Assoc". Return a list that contains only the @Handles of the associated pm:EnsembleContextStates that indicate
  membership in the SDC PARTICIPANT ENSEMBLE referred by the provided ensemble-id.

  The ensemble-id is an identifier specified by the USER that uniquely refers to an SDC PARTICIPANT ENSEMBLE.
  To clarify which pm:EnsembleContextStates are needed and which @Handles shall be returned, four examples are given.

  Example 1: treatment session
    The fact that a POC MEDICAL DEVICE is currently working in a (temporal) logical group based on a treatment session
    may be expressed by the states of a pm:EnsembleContextDescriptor. If each of its pm:EnsembleContextStates describes
    a step in this treatment session, then the manipulation returns only the state handle of the pm:EnsembleContextState
    with @ContextAssociation = 'Assoc' that indicates membership in the logical group resp. SDC PARTICIPANT ENSEMBLE.
    The provided ensemble-id refers to this logical group resp. SDC PARTICIPANT ENSEMBLE. In this scenario there shall
    be only one pm:EnsembleContextState with @ContextAssociation = 'Assoc' at a time for the provided
    pm:EnsembleContextDescriptor.

  Example 2: location inferring
    If a pm:EnsembleContextDescriptor has multiple pm:EnsembleContextStates whereby each describes a membership of a
    location-inferred SDC PARTICIPANT ENSEMBLE if associated. The manipulation shall return the state handle of the
    pm:EnsembleContextState with @ContextAssociation = 'Assoc' that indicates membership in the SDC PARTICIPANT
    ENSEMBLE referred by the provided ensemble-id.

  Example 3: general hospital process
    Consider a general process within the hospital with multiple steps whereby each step is divided into multiple minor
    steps describing the major step more precisely. Membership of this main process as well as of the sub processes is
    modeled by a pm:EnsembleContextDescriptor that has multiple pm:EnsembleContextStates for the major as well as for
    the minor steps. To indicate membership in a sub process referred by the provided ensemble-id a
    pm:EnsembleContextState representing a major step and a pm:EnsembleContextState representing a major's minor step
    have to be associated. The manipulation shall return only the state handle of the pm:EnsembleContextState
    representing the minor step.

   Example 4: multiple states for one ensemble-id
    Consider a scenario where multiple pm:EnsembleContextStates of a provided pm:EnsembleContextDescriptor are needed to
    indicate membership in the same SDC PARTICIPANT ENSEMBLE referenced by the given ensemble-id. These states are all
    associated at the same time and the manipulation shall return their handles.

  The state shall be persistent until a next manipulation call. If the device is not able to maintain the static state,
  it shall return RESULT_NOT_SUPPORTED.
   */
  rpc IndicateMembershipInEnsembleByEnsembleId (EnsembleIdRequest)
      returns (IndicateMembershipInEnsembleByEnsembleIdResponse);

  /*
  End membership in an SDC PARTICIPANT ENSEMBLE for a provided pm:EnsembleContextDescriptor and a provided ensemble-id.
  The ensemble-id is an identifier specified by the USER that uniquely refers to an SDC PARTICIPANT ENSEMBLE.

  The state shall be persistent until a next manipulation call. If the device is not able to maintain the static state,
  it shall return RESULT_NOT_SUPPORTED.
   */
  rpc EndMembershipInEnsembleByEnsembleId (EnsembleIdRequest)
      returns (BasicResponse);

  /*
  Create or adapt a pm:PatientContextState having an associated patient with an auto generated patient id.
   */
  rpc AssociatePatientWithAutoGeneratedPatientId (google.protobuf.Empty)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  For the MDS with the given handle:

  In an MdibVersion x associate a validated, i.e. one containing at least one pm:Validator, pm:LocationContextState
  having an pm:Identification that is not already in use for a location in the MDS especially in terms of the Root and
  Extension attribute combination.

  Then in MdibVersion y > x of the same sequence make a change that does not alter any context state.

  At last in MdibVersion z > y of the same sequence disassociate the context state added in x via this rpc.
   */
  rpc TemporarilyAssociateLocationWithNewIdentifier (t2iapi.BasicHandleRequest)
      returns (t2iapi.BasicResponse);

  /*
  For the MDS with the given handle:

  In an MdibVersion x associate a validated, i.e. one containing at least one pm:Validator, pm:PatientContextState
  having an pm:Identification that is not already in use for a patient in the MDS especially in terms of the Root
  and Extension attribute combination.

  Then in MdibVersion y > x of the same sequence make a change that does not alter any context state.

  At last in MdibVersion z > y of the same sequence disassociate the context state added in x via this rpc.
   */
  rpc TemporarilyAssociatePatientWithNewIdentifier (t2iapi.BasicHandleRequest)
      returns (t2iapi.BasicResponse);
}
