/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2022 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.context;

import "google/protobuf/empty.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/basic_responses.proto";
import "t2iapi/context/context_requests.proto";
import "t2iapi/context/context_responses.proto";

option java_package = "com.draeger.medical.t2iapi.context";
option java_outer_classname = "ContextApiService";

/*
Service to handle context manipulations.
 */
service ContextService {

  /*
  Use the given LocationDetail in a currently associated LocationContextState or associate a new LocationContextState
  with the LocationDetail.
  The goal of this rpc is to have an associated LocationContextState, that contains the given LocationDetail.
  This can for example be achieved by changing the location of the device in its settings UI.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc SetLocationDetail (t2iapi.context.SetLocationDetailRequest)
      returns (BasicResponse);

  /*
  Remove all Validators elements for the AbstractContextState with the provided context state handle.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc RemoveAllContextStateValidators (t2iapi.context.ContextStateHandleRequest)
      returns (BasicResponse);

  /*
  Set the ContextAssociation of the target ContextState to the given value.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc SetContextStateAssociation (t2iapi.context.SetContextStateAssociationRequest)
      returns (BasicResponse);

  /*
  Create a new ContextState instance with the given ContextAssociation value for the given descriptor handle.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssociation (t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create a new pm:AbstractContextState instance with the given @ContextAssociation value for the given descriptor handle
  and provide at least the number of pm:Validator elements for this ContextState.
  If the number of pm:Validator elements is zero, zero pm:Validator elements shall be provided.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssociationAndValidators(
  t2iapi.context.CreateContextStateWithAssociationAndValidatorsRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create a new ContextState instance with the given ContextAssociation value for the given descriptor handle
  and provide the unique identification.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssociationAndUniqueIdentification(
  t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationAndUniqueIdentificationResponse);

  /*
  Create a new ContextState instance with the given ContextAssociation value for the given descriptor handle
  and provide at least one Identification and Validator for this ContextState.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssocIdentificationAndValidator(
  t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (BasicResponse);

  /*
  Remove at least one pm:Identification element for the pm:AbstractContextState/@Handle.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
 */
  rpc RemoveIdentificationOfContextState(
  t2iapi.context.ContextStateHandleRequest)
      returns (BasicResponse);

  /*
  Change at least one pm:Identification element for the pm:AbstractContextState/@Handle.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
 */
  rpc ChangeIdentificationOfContextState(
  t2iapi.context.ContextStateHandleRequest)
      returns (BasicResponse);

  /*
  Create a new ContextState instance with the given ContextAssociation value for the given descriptor handle,
  confirm by requested validator type.
  The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
  the static state, it shall return RESULT_NOT_SUPPORTED.
   */
  rpc CreateContextStateWithAssocAndSpecificValidator(
    t2iapi.context.CreateContextStateWithAssocAndSpecificValidatorRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create a new neonatal patient with a given type of association and
  including the mothers identification.
   */
  rpc CreateNeonatalPatientWithAssociationAndMothersIdentification(
  t2iapi.context.CreateContextStateWithAssociationRequest)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);

  /*
  Create or adapt a PatientContextState with CoreData/PatientType having the requested patient type.
  The PatientContextState/@ContextAssociation shall be "Associated".
   */
  rpc AssociatePatient (t2iapi.context.AssociatePatientRequest)
      returns (BasicResponse);

  /*
  Indicate membership in an SDC PARTICIPANT ENSEMBLE using an ensemble context, indicated by its descriptor handle.
   */
  rpc EnsembleContextIndicateMembership (BasicHandleRequest)
      returns (BasicResponse);

  /*
  Indicate membership in an SDC PARTICIPANT ENSEMBLE using an ensemble context that has the provided descriptor handle
  and return a list of pm:Identification elements which identify an ensemble and thus enable the caller to distinguish
  ensembles from each other.
   */
  rpc EnsembleContextIndicateMembershipWithIdentification (BasicHandleRequest)
      returns (EnsembleContextIndicateMembershipWithIdentificationResponse);

  /*
  Returns all types of contexts which are supported by the DUT.
   */
  rpc GetSupportedContextTypes (google.protobuf.Empty)
      returns (t2iapi.context.GetSupportedContextTypesResponse);

  /*
  Create or adapt a pm:PatientContextState having an associated patient with an auto generated patient id.
   */
  rpc AssociatePatientWithAutoGeneratedPatientId (google.protobuf.Empty)
      returns (t2iapi.context.CreateContextStateWithAssociationResponse);
}
