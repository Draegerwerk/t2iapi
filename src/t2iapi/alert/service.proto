/*
This Source Code Form is subject to the terms of the MIT License.
Copyright (c) 2022 Draegerwerk AG & Co. KGaA.

SPDX-License-Identifier: MIT
*/

syntax = "proto3";

package t2iapi.alert;

import "t2iapi/basic_responses.proto";
import "t2iapi/basic_requests.proto";
import "t2iapi/alert/alert_requests.proto";


option java_package = "com.draeger.medical.t2iapi.alert";
option java_outer_classname = "AlertApiService";


/*
Service to handle alert manipulations.
 */
service AlertService {

    /*
    The AlertConditionState/@Presence shall be transitioned to the requested value for the AlertCondition with the
    given handle. Even if the @Presence already has the requested value.
     */
    rpc SetAlertConditionPresence (t2iapi.alert.SetAlertConditionPresenceRequest)
        returns (BasicResponse);

    /*
    Change the state of the alarm signal inactivation state represented by the AlertCondition with the given
    handle as requested.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.

    Inactivation States can be for example:
    - Global Audio Pause, could have an condition with the text "Audio Pause"
    - "Pressures Off"
    - Cardiac By-Pass Mode
     */
    rpc SetAlarmSignalInactivationState (t2iapi.alert.SetAlarmSignalInactivationStateRequest)
        returns (BasicResponse);

    /*
    Set the AlertSystem with the given handle to not functional.
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetAlertSystemNotFunctional (BasicHandleRequest) returns (BasicResponse);

    /*
    Initiate alarm off for the AlertCondition with the given handle.
     */
    rpc InitiateAlarmOff (BasicHandleRequest) returns (BasicResponse);

    /*
    For the AlertSignal with the provided handle ensure that the following sequence appears
    - State 1
       - pm:AlertSignalState/@Presence must be "On" or "Ack"
       - pm:AlertSignalState/@ActivationState must be "On"
       - the associated pm:AlertConditionState/@Presence must be "true"
    - State 2
       - pm:AlertSignalState/@ActivationState must be "On"
       - the associated pm:AlertConditionState/@Presence must be "false"
    */
   rpc SetAsActivationStateOnAndChangeAcPresenceFalse (BasicHandleRequest)
       returns (BasicResponse);

   /*
    Set the pm:AlertSignalState/@Presence for a subset of requested alert signals to the requested
    @Presence value(s).
    The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
    the static state, it shall return RESULT_NOT_SUPPORTED.
     */
    rpc SetSomeAlertSignalPresence (t2iapi.alert.SetSomeAlertSignalPresenceRequest)
        returns (BasicResponse);

}
